// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34209
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ShoppingCart.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ShoppingCartFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ShoppingCart.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ShoppingCart", "In order to avoid silly mistakes\r\nAs a math idiot\r\nI want to be told the sum of t" +
                    "wo numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "ShoppingCart")))
            {
                ShoppingCart.Specs.ShoppingCartFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Calculate Subtotal")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ShoppingCart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("mytag")]
        public virtual void CalculateSubtotal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate Subtotal", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "ProductName",
                        "Price",
                        "Quantity"});
            table1.AddRow(new string[] {
                        "1",
                        "Arroz Progreso",
                        "50",
                        "10"});
            table1.AddRow(new string[] {
                        "2",
                        "Carne",
                        "40",
                        "10"});
            table1.AddRow(new string[] {
                        "3",
                        "Queso",
                        "10",
                        "5"});
#line 8
 testRunner.Given("the cart has the following items", ((string)(null)), table1, "Given ");
#line 13
 testRunner.When("the subtotal is calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then("the result should be 950", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Calculate Subtotal from a stored cart")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ShoppingCart")]
        public virtual void CalculateSubtotalFromAStoredCart()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate Subtotal from a stored cart", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Quantity",
                        "Owner"});
            table2.AddRow(new string[] {
                        "1",
                        "10",
                        "ccastro"});
            table2.AddRow(new string[] {
                        "2",
                        "10",
                        "ccastro"});
            table2.AddRow(new string[] {
                        "3",
                        "5",
                        "ccastro"});
#line 18
 testRunner.Given("the cart stored for user is", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "ProductName",
                        "Price",
                        "Quantity"});
            table3.AddRow(new string[] {
                        "1",
                        "Arroz Progreso",
                        "50",
                        "200"});
            table3.AddRow(new string[] {
                        "2",
                        "Carne",
                        "40",
                        "300"});
            table3.AddRow(new string[] {
                        "3",
                        "Queso",
                        "10",
                        "250"});
#line 23
 testRunner.And("the products table is the following", ((string)(null)), table3, "And ");
#line 28
 testRunner.And("the user logged is \'ccastro\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.When("the subtotal is calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
 testRunner.Then("the result should be 950", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Try to calculate Subtotal from a stored cart thats not exceeding product existanc" +
            "e quantity")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ShoppingCart")]
        public virtual void TryToCalculateSubtotalFromAStoredCartThatsNotExceedingProductExistanceQuantity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to calculate Subtotal from a stored cart thats not exceeding product existanc" +
                    "e quantity", ((string[])(null)));
#line 34
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Quantity",
                        "Owner"});
            table4.AddRow(new string[] {
                        "1",
                        "10",
                        "ccastro"});
            table4.AddRow(new string[] {
                        "2",
                        "10",
                        "ccastro"});
            table4.AddRow(new string[] {
                        "3",
                        "5",
                        "ccastro"});
#line 35
 testRunner.Given("the cart stored for user is", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "ProductName",
                        "Price",
                        "Quantity"});
            table5.AddRow(new string[] {
                        "1",
                        "Arroz Progreso",
                        "50",
                        "10"});
            table5.AddRow(new string[] {
                        "2",
                        "Carne",
                        "40",
                        "15"});
            table5.AddRow(new string[] {
                        "3",
                        "Queso",
                        "10",
                        "5"});
#line 40
 testRunner.And("the products table is the following", ((string)(null)), table5, "And ");
#line 45
 testRunner.And("the user logged is \'ccastro\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.When("the subtotal is calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
 testRunner.Then("the result should be 950", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Try to calculate Subtotal from a stored cart that is exceeding existance quantity" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ShoppingCart")]
        public virtual void TryToCalculateSubtotalFromAStoredCartThatIsExceedingExistanceQuantity()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to calculate Subtotal from a stored cart that is exceeding existance quantity" +
                    "", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Quantity",
                        "Owner"});
            table6.AddRow(new string[] {
                        "1",
                        "100",
                        "ccastro"});
            table6.AddRow(new string[] {
                        "2",
                        "100",
                        "ccastro"});
            table6.AddRow(new string[] {
                        "3",
                        "50",
                        "ccastro"});
#line 51
 testRunner.Given("the cart stored for user is", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "ProductName",
                        "Price",
                        "Quantity"});
            table7.AddRow(new string[] {
                        "1",
                        "Arroz Progreso",
                        "50",
                        "70"});
            table7.AddRow(new string[] {
                        "2",
                        "Carne",
                        "40",
                        "83"});
            table7.AddRow(new string[] {
                        "3",
                        "Queso",
                        "10",
                        "50"});
#line 56
 testRunner.And("the products table is the following", ((string)(null)), table7, "And ");
#line 61
 testRunner.And("the user logged is \'ccastro\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 62
 testRunner.When("the subtotal is calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 63
 testRunner.Then("the user is presented with an error message about quantity", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Try to calculate Subtotal from a stored cart that has no expired items")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ShoppingCart")]
        public virtual void TryToCalculateSubtotalFromAStoredCartThatHasNoExpiredItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to calculate Subtotal from a stored cart that has no expired items", ((string[])(null)));
#line 66
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Quantity",
                        "Owner"});
            table8.AddRow(new string[] {
                        "1",
                        "10",
                        "ccastro"});
            table8.AddRow(new string[] {
                        "2",
                        "10",
                        "ccastro"});
            table8.AddRow(new string[] {
                        "3",
                        "5",
                        "ccastro"});
#line 67
 testRunner.Given("the cart stored for user is", ((string)(null)), table8, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "ProductName",
                        "Price",
                        "Quantity",
                        "Date"});
            table9.AddRow(new string[] {
                        "1",
                        "Arroz Progreso",
                        "50",
                        "10",
                        "1420113600000"});
            table9.AddRow(new string[] {
                        "2",
                        "Carne",
                        "40",
                        "15",
                        "1420113600000"});
            table9.AddRow(new string[] {
                        "3",
                        "Queso",
                        "10",
                        "5",
                        "1420113600000"});
#line 72
 testRunner.And("the products table with Date is the following", ((string)(null)), table9, "And ");
#line 77
 testRunner.And("the user logged is \'ccastro\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
 testRunner.When("the subtotal is calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 79
 testRunner.Then("the result should be 950", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Try to calculate Subtotal from a stored cart that has some expired items")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ShoppingCart")]
        public virtual void TryToCalculateSubtotalFromAStoredCartThatHasSomeExpiredItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to calculate Subtotal from a stored cart that has some expired items", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Quantity",
                        "Owner"});
            table10.AddRow(new string[] {
                        "1",
                        "10",
                        "ccastro"});
            table10.AddRow(new string[] {
                        "2",
                        "10",
                        "ccastro"});
            table10.AddRow(new string[] {
                        "3",
                        "5",
                        "ccastro"});
#line 83
 testRunner.Given("the cart stored for user is", ((string)(null)), table10, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "ProductName",
                        "Price",
                        "Quantity",
                        "Date"});
            table11.AddRow(new string[] {
                        "1",
                        "Arroz Progreso",
                        "50",
                        "10",
                        "1420113600000"});
            table11.AddRow(new string[] {
                        "2",
                        "Carne",
                        "40",
                        "15",
                        "1420113600000"});
            table11.AddRow(new string[] {
                        "3",
                        "Queso",
                        "10",
                        "5",
                        "1420070399000"});
#line 88
 testRunner.And("the products table with Date is the following", ((string)(null)), table11, "And ");
#line 93
 testRunner.And("the user logged is \'ccastro\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.When("the subtotal is calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
 testRunner.Then("the user is presented with an error message about expiration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Try to calculate Subtotal from a stored cart that has some discounts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ShoppingCart")]
        public virtual void TryToCalculateSubtotalFromAStoredCartThatHasSomeDiscounts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to calculate Subtotal from a stored cart that has some discounts", ((string[])(null)));
#line 98
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Quantity",
                        "Owner"});
            table12.AddRow(new string[] {
                        "1",
                        "10",
                        "ccastro"});
            table12.AddRow(new string[] {
                        "2",
                        "10",
                        "ccastro"});
            table12.AddRow(new string[] {
                        "3",
                        "5",
                        "ccastro"});
#line 99
 testRunner.Given("the cart stored for user is", ((string)(null)), table12, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "ProductName",
                        "Price",
                        "Quantity"});
            table13.AddRow(new string[] {
                        "1",
                        "Arroz Progreso",
                        "50",
                        "10"});
            table13.AddRow(new string[] {
                        "2",
                        "Carne",
                        "40",
                        "15"});
            table13.AddRow(new string[] {
                        "3",
                        "Queso",
                        "10",
                        "5"});
#line 104
 testRunner.And("the products table is the following", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Discount"});
            table14.AddRow(new string[] {
                        "2",
                        "0.15"});
#line 109
 testRunner.And("the discounts table is the following", ((string)(null)), table14, "And ");
#line 112
 testRunner.And("the user logged is \'ccastro\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.When("the subtotal is calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 114
 testRunner.Then("the result should be 890", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Try to calculate Subtotal from a stored cart that has discounts on everything")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ShoppingCart")]
        public virtual void TryToCalculateSubtotalFromAStoredCartThatHasDiscountsOnEverything()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Try to calculate Subtotal from a stored cart that has discounts on everything", ((string[])(null)));
#line 117
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Quantity",
                        "Owner"});
            table15.AddRow(new string[] {
                        "1",
                        "10",
                        "ccastro"});
            table15.AddRow(new string[] {
                        "2",
                        "10",
                        "ccastro"});
            table15.AddRow(new string[] {
                        "3",
                        "5",
                        "ccastro"});
#line 118
 testRunner.Given("the cart stored for user is", ((string)(null)), table15, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "ProductName",
                        "Price",
                        "Quantity"});
            table16.AddRow(new string[] {
                        "1",
                        "Arroz Progreso",
                        "50",
                        "10"});
            table16.AddRow(new string[] {
                        "2",
                        "Carne",
                        "40",
                        "15"});
            table16.AddRow(new string[] {
                        "3",
                        "Queso",
                        "10",
                        "5"});
#line 123
 testRunner.And("the products table is the following", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Discount"});
            table17.AddRow(new string[] {
                        "1",
                        "0.30"});
            table17.AddRow(new string[] {
                        "2",
                        "0.15"});
            table17.AddRow(new string[] {
                        "3",
                        "0.50"});
#line 128
 testRunner.And("the discounts table is the following", ((string)(null)), table17, "And ");
#line 133
 testRunner.And("the user logged is \'ccastro\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
 testRunner.When("the subtotal is calculated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 135
 testRunner.Then("the result should be 715", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
